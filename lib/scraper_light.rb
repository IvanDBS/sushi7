require 'nokogiri'
require 'httparty'
require_relative 'models'

class MenuScraperLight
  BASE_URL = 'https://ohmysushi.md'

  def self.scrape_menu
    puts "–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –º–µ–Ω—é (–ª–µ–≥–∫–∏–π —Ä–µ–∂–∏–º)..."
    
    begin
      # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      categories = {
        sets: Category.find_or_create_by!(name: 'üç± –°–µ—Ç—ã', url_name: 'seturi'),
        sushi: Category.find_or_create_by!(name: 'üç£ –°—É—à–∏', url_name: 'sushi'),
        maki: Category.find_or_create_by!(name: 'üçô –ú–∞–∫–∏-–ù–∏–≥–∏—Ä–∏-–ì—É–Ω–∫–∞–Ω', url_name: 'maki-nigiri-guncan'),
        poke: Category.find_or_create_by!(name: 'ü•ó –ü–æ–∫–µ –ë–æ—É–ª', url_name: 'poke-bowl'),
        tempura: Category.find_or_create_by!(name: 'üç§ –¢–µ–º–ø—É—Ä–∞', url_name: 'tempura'),
        vulcan: Category.find_or_create_by!(name: 'üåã –í—É–ª–∫–∞–Ω', url_name: 'vulcan'),
        wok: Category.find_or_create_by!(name: 'ü•¢ –í–æ–∫', url_name: 'wok'),
        soups: Category.find_or_create_by!(name: 'ü•£ –°—É–ø—ã', url_name: 'supe'),
        drinks: Category.find_or_create_by!(name: 'ü•§ –ù–∞–ø–∏—Ç–∫–∏', url_name: 'bauturi'),
        desserts: Category.find_or_create_by!(name: 'üç∞ –î–µ—Å–µ—Ä—Ç—ã', url_name: 'dessert-2'),
        sale: Category.find_or_create_by!(name: 'üè∑Ô∏è –ê–∫—Ü–∏–∏', url_name: 'reduceri')
      }
      
      # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      categories.each do |key, category|
        scrape_category(category)
        sleep(1) # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      end
      
      puts "\n–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!"
      puts "–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: #{Category.count}"
      puts "–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: #{Product.count}"
      
    rescue => e
      puts "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –º–µ–Ω—é: #{e.message}"
      puts e.backtrace
    end
  end
  
  private
  
  def self.scrape_category(category)
    begin
      page = 1
      has_more_pages = true
      
      while has_more_pages
        url = if page == 1
          "#{BASE_URL}/product-category/#{category.url_name}/"
        else
          "#{BASE_URL}/product-category/#{category.url_name}/page/#{page}/"
        end
        
        puts "\n–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #{category.name} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ #{page}) (#{url})"
        
        response = HTTParty.get(url,
          headers: {
            'User-Agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
          }
        )
        puts "  –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: #{response.code}"
        
        return unless response.code == 200
        
        doc = Nokogiri::HTML(response.body)
        products = doc.css('.product-small:not(.product), .product:not(.product-small)')
        
        # If no products found on this page, stop pagination
        if products.empty?
          has_more_pages = false
          break
        end
        
        products.each do |product_element|
          begin
            name = product_element.css('.product-title, .woocommerce-loop-product__title').text.strip
            puts "  –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: #{name}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            existing_product = Product.find_by(name: name)
            if existing_product
              puts "    ‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç: #{name}"
              next
            end
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = product_element.css('img').first
            image_url = image['src'] if image
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            description = ""
            product_link = product_element.css('a').first
            if product_link
              product_url = product_link['href']
              puts "    –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–∞: #{product_url}"
              product_response = HTTParty.get(product_url,
                headers: {
                  'User-Agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                }
              )
              if product_response.code == 200
                product_doc = Nokogiri::HTML(product_response.body)
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö, –Ω–æ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ
                description_element = product_doc.css('.woocommerce-product-details__short-description, .product-short-description, .product-description').first
                if description_element
                  description = description_element.text.strip
                end
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Å—Ç–∞
                if description.empty?
                  description_element = product_doc.css('.product-short-description, .description').first
                  if description_element
                    description = description_element.text.strip
                  end
                end
                
                # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
                description = description.gsub(/\s+/, ' ').strip
                
                # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
                description = name if description.empty?
              end
            end
            
            # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
            price_element = product_element.css('.price, .amount').first
            if price_element
              # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ü–∏–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã
              sale_price_element = price_element.css('ins .amount').first
              regular_price_element = price_element.css('.amount').first
              
              if sale_price_element
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ü–∏–æ–Ω–Ω–∞—è —Ü–µ–Ω–∞
                sale_price = sale_price_element.text.strip.gsub(/[^\d,]/, '').gsub(',', '.').to_f
                regular_price = regular_price_element.text.strip.gsub(/[^\d,]/, '').gsub(',', '.').to_f
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
                product = Product.create!(
                  name: name,
                  description: description,
                  price: sale_price,
                  image_url: image_url,
                  category: category,
                  is_sale: true,
                  sale_price: sale_price,
                  original_price: regular_price
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ü–∏–π
                sale_category = Category.find_by(name: 'üè∑Ô∏è –ê–∫—Ü–∏–∏')
                if sale_category
                  product.categories << sale_category unless product.categories.include?(sale_category)
                end
                
                price = sale_price
              else
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ü–∏–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã
                regular_price = regular_price_element&.text || price_element.text
                regular_price = regular_price.gsub(/[^\d,]/, '').gsub(',', '.').to_f
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
                Product.create!(
                  name: name,
                  description: description,
                  price: regular_price,
                  image_url: image_url,
                  category: category,
                  is_sale: false,
                  sale_price: regular_price,
                  original_price: regular_price
                )
                
                price = regular_price
              end
            else
              price = 0.0
            end
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ä–∞–∑—É–º–Ω–æ–π
            if price > 1000
              puts "    ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ (#{price}), –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é"
            end
            
            puts "    ‚úì –¶–µ–Ω–∞: #{price} MDL"
            puts "    ‚úì –û–ø–∏—Å–∞–Ω–∏–µ: #{description[0..50]}..."
            
            sleep(0.5) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
            
          rescue => e
            puts "    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ #{name}: #{e.message}"
            puts e.backtrace
          end
        end
        
        # Move to next page
        page += 1
        sleep(1) # Add pause between pages
      end
      
    rescue => e
      puts "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #{category.name}: #{e.message}"
      puts e.backtrace
    end
  end
end

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if __FILE__ == $0
  MenuScraperLight.scrape_menu
end