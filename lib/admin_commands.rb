module AdminCommands
  def admin?(user_id)
    user_id.to_s == ENV['ADMIN_TELEGRAM_ID']
  end

  def handle_admin_command(bot, message, user)
    return unless admin?(message.from.id)

    case message.text
    when '/list_products'
      list_products(bot, message)
    when /^\/find_product (.+)/
      find_product(bot, message, $1)
    when /^\/product_info (\d+)/
      show_product_info(bot, message, $1)
    when /^\/edit_price (\d+) (\d+\.?\d*)/
      edit_price(bot, message, $1, $2)
    when /^\/set_sale (\d+) (\d+\.?\d*)/
      set_sale(bot, message, $1, $2)
    when /^\/remove_sale (\d+)/
      remove_sale(bot, message, $1)
    when '/sale_products'
      list_sale_products(bot, message)
    end
  end

  private

  def list_products(bot, message)
    products = Product.all
    text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
    
    products.each do |product|
      sale_info = if product.is_sale
        "(–ê–∫—Ü–∏—è: #{product.sale_price} MDL)"
      else
        ""
      end
      
      text += "ID: #{product.id} | #{product.name} | #{product.price} MDL #{sale_info}\n"
    end
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    text.scan(/.{1,4000}/m) do |chunk|
      bot.api.send_message(
        chat_id: message.chat.id,
        text: chunk
      )
    end
  end

  def find_product(bot, message, query)
    products = Product.where("name ILIKE ?", "%#{query}%")
    
    if products.empty?
      bot.api.send_message(
        chat_id: message.chat.id,
        text: "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
      )
      return
    end

    text = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
    products.each do |product|
      sale_info = if product.is_sale
        "(–ê–∫—Ü–∏—è: #{product.sale_price} MDL)"
      else
        ""
      end
      
      text += "ID: #{product.id} | #{product.name} | #{product.price} MDL #{sale_info}\n"
    end

    bot.api.send_message(
      chat_id: message.chat.id,
      text: text
    )
  end

  def show_product_info(bot, message, product_id)
    product = Product.find(product_id)
    
    text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:\n\n"
    text += "ID: #{product.id}\n"
    text += "–ù–∞–∑–≤–∞–Ω–∏–µ: #{product.name}\n"
    text += "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: #{product.category.name}\n"
    text += "–û–ø–∏—Å–∞–Ω–∏–µ: #{product.description}\n"
    text += "–û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞: #{product.price} MDL\n"
    
    if product.is_sale
      text += "–ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Ü–µ–Ω–∞: #{product.sale_price} MDL\n"
      text += "–°–∫–∏–¥–∫–∞: #{((1 - product.sale_price / product.price) * 100).round(1)}%\n"
    end

    bot.api.send_message(
      chat_id: message.chat.id,
      text: text
    )
  end

  def edit_price(bot, message, product_id, new_price)
    product = Product.find(product_id)
    old_price = product.price
    
    product.update(
      price: new_price.to_f,
      original_price: new_price.to_f,
      sale_price: new_price.to_f
    )

    bot.api.send_message(
      chat_id: message.chat.id,
      text: "‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ \"#{product.name}\" –∏–∑–º–µ–Ω–µ–Ω–∞:\n#{old_price} MDL ‚û°Ô∏è #{new_price} MDL"
    )
  end

  def set_sale(bot, message, product_id, sale_price)
    product = Product.find(product_id)
    sale_category = Category.find_by(name: 'üè∑Ô∏è –ê–∫—Ü–∏–∏')
    
    if sale_price.to_f >= product.price
      bot.api.send_message(
        chat_id: message.chat.id,
        text: "‚ùå –ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω—ã (#{product.price} MDL)"
      )
      return
    end

    product.update(
      is_sale: true,
      sale_price: sale_price.to_f,
      original_price: product.price,
      price: sale_price.to_f
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ü–∏–π, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    if sale_category && !product.categories.include?(sale_category)
      product.categories << sale_category
    end

    discount = ((1 - sale_price.to_f / product.original_price) * 100).round(1)
    bot.api.send_message(
      chat_id: message.chat.id,
      text: "‚úÖ –¢–æ–≤–∞—Ä \"#{product.name}\" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–∫—Ü–∏—é:\n–û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞: #{product.original_price} MDL\n–ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Ü–µ–Ω–∞: #{sale_price} MDL\n–°–∫–∏–¥–∫–∞: #{discount}%"
    )
  end

  def remove_sale(bot, message, product_id)
    product = Product.find(product_id)
    sale_category = Category.find_by(name: 'üè∑Ô∏è –ê–∫—Ü–∏–∏')
    
    product.update(
      is_sale: false,
      sale_price: nil,
      price: product.original_price,
      original_price: nil
    )

    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ü–∏–π
    if sale_category
      product.categories.delete(sale_category)
    end

    bot.api.send_message(
      chat_id: message.chat.id,
      text: "‚úÖ –¢–æ–≤–∞—Ä \"#{product.name}\" —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ü–∏–∏\n–¶–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: #{product.price} MDL"
    )
  end

  def list_sale_products(bot, message)
    products = Product.where(is_sale: true)
    
    if products.empty?
      bot.api.send_message(
        chat_id: message.chat.id,
        text: "–°–µ–π—á–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞–∫—Ü–∏–∏."
      )
      return
    end

    text = "–¢–æ–≤–∞—Ä—ã –ø–æ –∞–∫—Ü–∏–∏:\n\n"
    products.each do |product|
      discount = ((1 - product.sale_price / product.original_price) * 100).round(1)
      text += "ID: #{product.id} | #{product.name}\n" \
              "#{product.original_price} MDL ‚û°Ô∏è #{product.sale_price} MDL (-#{discount}%)\n\n"
    end

    bot.api.send_message(
      chat_id: message.chat.id,
      text: text
    )
  end
end 