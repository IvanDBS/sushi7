require 'telegram/bot'
require 'dotenv/load'
require_relative 'models'
require_relative 'scraper'

class SushiBot
  def initialize
    @token = ENV['TELEGRAM_BOT_TOKEN']
    @admin_chat_id = ENV['ADMIN_CHAT_ID']
  end

  def start
    Telegram::Bot::Client.run(@token) do |bot|
      puts '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'
      
      bot.listen do |message|
        begin
          user = User.find_or_create_by(telegram_id: message.from.id) do |u|
            u.first_name = message.from.first_name
            u.last_name = message.from.last_name
          end

          case message
          when Telegram::Bot::Types::Message
            handle_message(bot, message, user)
          when Telegram::Bot::Types::CallbackQuery
            handle_callback(bot, message, user)
          end
        rescue => e
          puts "–û—à–∏–±–∫–∞: #{e.message}"
          bot.api.send_message(
            chat_id: message.from.id,
            text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          )
        end
      end
    end
  end

  private

  def handle_message(bot, message, user)
    case message.text
    when '/start'
      send_welcome_message(bot, message)
    when 'üç± –ú–µ–Ω—é'
      show_categories(bot, message)
    when 'üõí –ö–æ—Ä–∑–∏–Ω–∞'
      show_cart(bot, message, user)
    when 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'
      show_contacts(bot, message)
    else
      handle_text_input(bot, message, user)
    end
  end

  def send_welcome_message(bot, message)
    keyboard = [
      [{ text: 'üç± –ú–µ–Ω—é' }],
      [{ text: 'üõí –ö–æ—Ä–∑–∏–Ω–∞' }],
      [{ text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã' }]
    ]
    markup = Telegram::Bot::Types::ReplyKeyboardMarkup.new(
      keyboard: keyboard,
      resize_keyboard: true
    )
    
    bot.api.send_message(
      chat_id: message.chat.id,
      text: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Oh! My Sushi! üç£\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      reply_markup: markup
    )
  end

  def show_categories(bot, message)
    categories = Category.all
    buttons = categories.map do |category|
      [Telegram::Bot::Types::InlineKeyboardButton.new(
        text: category.name,
        callback_data: "category_#{category.id}"
      )]
    end

    markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)
    bot.api.send_message(
      chat_id: message.chat.id,
      text: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
      reply_markup: markup
    )
  end

  def handle_callback(bot, callback_query, user)
    case callback_query.data
    when /^category_(\d+)$/
      show_category_products(bot, callback_query, $1)
    when /^product_(\d+)$/
      show_product_details(bot, callback_query, $1)
    when /^add_to_cart_(\d+)$/
      add_to_cart(bot, callback_query, $1, user)
    end
  end

  def show_category_products(bot, callback_query, category_id)
    products = Product.where(category_id: category_id)
    products.each do |product|
      buttons = [[
        Telegram::Bot::Types::InlineKeyboardButton.new(
          text: "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É (#{product.price} MDL)",
          callback_data: "add_to_cart_#{product.id}"
        )
      ]]
      
      markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)
      
      bot.api.send_photo(
        chat_id: callback_query.from.id,
        photo: product.image_url,
        caption: "#{product.name}\n#{product.description}\n–¶–µ–Ω–∞: #{product.price} MDL",
        reply_markup: markup
      )
    end
  end

  def show_cart(bot, message, user)
    order = user.orders.find_or_create_by(status: 'cart')
    if order.order_items.empty?
      bot.api.send_message(
        chat_id: message.chat.id,
        text: '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'
      )
      return
    end

    text = "–í–∞—à –∑–∞–∫–∞–∑:\n\n"
    total = 0
    order.order_items.each do |item|
      subtotal = item.quantity * item.price
      total += subtotal
      text += "#{item.product.name} x#{item.quantity} = #{subtotal} MDL\n"
    end
    text += "\n–ò—Ç–æ–≥–æ: #{total} MDL"

    buttons = [[
      Telegram::Bot::Types::InlineKeyboardButton.new(
        text: '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
        callback_data: 'checkout'
      )
    ]]
    markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)

    bot.api.send_message(
      chat_id: message.chat.id,
      text: text,
      reply_markup: markup
    )
  end

  def show_contacts(bot, message)
    bot.api.send_message(
      chat_id: message.chat.id,
      text: "üè† –ù–∞—à –∞–¥—Ä–µ—Å: [–ê–¥—Ä–µ—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞]\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: [–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]\n‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: [–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã]"
    )
  end

  def add_to_cart(bot, callback_query, product_id, user)
    product = Product.find(product_id)
    order = user.orders.find_or_create_by(status: 'cart')
    
    order_item = order.order_items.find_or_create_by(product: product) do |item|
      item.quantity = 0
      item.price = product.price
    end
    order_item.update(quantity: order_item.quantity + 1)

    bot.api.answer_callback_query(
      callback_query_id: callback_query.id,
      text: "#{product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É"
    )
  end

  def handle_text_input(bot, message, user)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  end
end

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __FILE__ == $0
  bot = SushiBot.new
  bot.start
end 