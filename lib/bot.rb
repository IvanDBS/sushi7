require 'telegram/bot'
require 'dotenv/load'
require_relative 'models'
require_relative 'scraper'

class SushiBot
  def initialize
    @token = ENV['TELEGRAM_BOT_TOKEN']
    @admin_chat_id = ENV['ADMIN_CHAT_ID']
  end

  def update_menu
    puts "\n=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –∏–∑ —Å–∞–π—Ç–∞ ==="
    MenuScraper.scrape_menu
    puts "=== –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ! ===\n"
  end

  def start
    Telegram::Bot::Client.run(@token) do |bot|
      puts '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'
      
      bot.listen do |message|
        begin
          case message
          when Telegram::Bot::Types::Message
            if message.from.id.to_s == @admin_chat_id && message.text == '/update_menu'
              update_menu
              bot.api.send_message(
                chat_id: message.chat.id,
                text: "–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
              )
              next
            end

            user = User.find_or_create_by(telegram_id: message.from.id) do |u|
              u.first_name = message.from.first_name
              u.last_name = message.from.last_name
            end
            handle_message(bot, message, user)
            
          when Telegram::Bot::Types::CallbackQuery
            user = User.find_or_create_by(telegram_id: message.from.id) do |u|
              u.first_name = message.from.first_name
              u.last_name = message.from.last_name
            end
            handle_callback(bot, message, user)
          end
        rescue => e
          puts "–û—à–∏–±–∫–∞: #{e.message}"
          puts e.backtrace
          chat_id = message.is_a?(Telegram::Bot::Types::CallbackQuery) ? message.message.chat.id : message.chat.id
          bot.api.send_message(
            chat_id: chat_id,
            text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          )
        end
      end
    end
  end

  private

  def handle_message(bot, message, user)
    case message.text
    when '/start'
      send_welcome_message(bot, message)
    when 'üç± –ú–µ–Ω—é'
      show_categories(bot, message)
    when 'üõí –ö–æ—Ä–∑–∏–Ω–∞'
      show_cart(bot, message, user)
    when 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'
      show_contacts(bot, message)
    else
      handle_text_input(bot, message, user)
    end
  end

  def send_welcome_message(bot, message)
    keyboard = [
      [{ text: 'üç± –ú–µ–Ω—é' }],
      [{ text: 'üõí –ö–æ—Ä–∑–∏–Ω–∞' }],
      [{ text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã' }]
    ]
    markup = Telegram::Bot::Types::ReplyKeyboardMarkup.new(
      keyboard: keyboard,
      resize_keyboard: true
    )
    
    bot.api.send_message(
      chat_id: message.chat.id,
      text: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Oh! My Sushi! üç£\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      reply_markup: markup
    )
  end

  def show_categories(bot, message_or_callback)
    categories = Category.all
    buttons = categories.each_slice(2).map do |category_pair|
      category_pair.map do |category|
        Telegram::Bot::Types::InlineKeyboardButton.new(
          text: category.name,
          callback_data: "category_#{category.id}"
        )
      end
    end

    markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    chat_id = if message_or_callback.is_a?(Telegram::Bot::Types::CallbackQuery)
                message_or_callback.message.chat.id
              else
                message_or_callback.chat.id
              end

    bot.api.send_message(
      chat_id: chat_id,
      text: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
      reply_markup: markup
    )
  end

  def handle_callback(bot, callback_query, user)
    case callback_query.data
    when /^category_(\d+)$/
      show_category_products(bot, callback_query, $1)
      bot.api.answer_callback_query(callback_query_id: callback_query.id)
    when /^product_(\d+)$/
      show_product_details(bot, callback_query, $1)
      bot.api.answer_callback_query(callback_query_id: callback_query.id)
    when /^add_to_cart_(\d+)$/
      add_to_cart(bot, callback_query, $1, user)
    when /^quantity_(\d+)_(-?\d+)$/
      update_quantity(bot, callback_query, $1, $2.to_i, user)
      bot.api.answer_callback_query(callback_query_id: callback_query.id)
    when 'back_to_categories'
      show_categories(bot, callback_query)
      bot.api.answer_callback_query(callback_query_id: callback_query.id)
    when 'show_cart'
      show_cart(bot, callback_query, user)
      bot.api.answer_callback_query(callback_query_id: callback_query.id)
    end
  end

  def show_category_products(bot, callback_query, category_id)
    products = Product.where(category_id: category_id)
    category = Category.find(category_id)
    
    buttons = products.map do |product|
      [Telegram::Bot::Types::InlineKeyboardButton.new(
        text: "#{product.name} ‚Äî #{product.price} MDL",
        callback_data: "product_#{product.id}"
      )]
    end

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º" –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
    buttons << [Telegram::Bot::Types::InlineKeyboardButton.new(
      text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
      callback_data: "back_to_categories"
    )]
    
    markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)
    
    bot.api.send_message(
      chat_id: callback_query.from.id,
      text: "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #{category.name}:",
      reply_markup: markup
    )
  end

  def show_product_details(bot, callback_query, product_id)
    product = Product.find(product_id)
    user = User.find_by(telegram_id: callback_query.from.id)
    order = user.orders.find_or_create_by(status: 'cart')
    order_item = order.order_items.find_by(product: product)
    current_quantity = order_item&.quantity || 0
    
    buttons = []
    
    if current_quantity > 0
      # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
      quantity_buttons = [
        Telegram::Bot::Types::InlineKeyboardButton.new(text: "‚ûñ", callback_data: "quantity_#{product.id}_-1"),
        Telegram::Bot::Types::InlineKeyboardButton.new(text: "#{current_quantity}", callback_data: "current_quantity"),
        Telegram::Bot::Types::InlineKeyboardButton.new(text: "‚ûï", callback_data: "quantity_#{product.id}_1")
      ]
      buttons << quantity_buttons
    else
      # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      add_button = Telegram::Bot::Types::InlineKeyboardButton.new(
        text: "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É ‚Äî #{product.price} MDL",
        callback_data: "add_to_cart_#{product.id}"
      )
      buttons << [add_button]
    end

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã, –µ—Å–ª–∏ –≤ –Ω–µ–π –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
    if order.order_items.any?
      total_items = order.order_items.sum(:quantity)
      total_sum = order.order_items.sum('quantity * price')
      cart_button = Telegram::Bot::Types::InlineKeyboardButton.new(
        text: "üõí –ö–æ—Ä–∑–∏–Ω–∞ (#{total_items} —à—Ç. - #{total_sum} MDL)",
        callback_data: "show_cart"
      )
      buttons << [cart_button]
    end

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
    back_button = Telegram::Bot::Types::InlineKeyboardButton.new(
      text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
      callback_data: "category_#{product.category_id}"
    )
    buttons << [back_button]
    
    markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)
    
    text = "#{product.name}\n\n#{product.description}\n\n–¶–µ–Ω–∞: #{product.price} MDL"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º
    begin
      bot.api.edit_message_caption(
        chat_id: callback_query.message.chat.id,
        message_id: callback_query.message.message_id,
        caption: text,
        reply_markup: markup
      )
    rescue
      if product.image_url
        bot.api.send_photo(
          chat_id: callback_query.from.id,
          photo: product.image_url,
          caption: text,
          reply_markup: markup
        )
      else
        bot.api.send_message(
          chat_id: callback_query.from.id,
          text: text,
          reply_markup: markup
        )
      end
    end
  end

  def update_quantity(bot, callback_query, product_id, change, user)
    product = Product.find(product_id)
    order = user.orders.find_or_create_by(status: 'cart')
    order_item = order.order_items.find_or_create_by(product: product) do |item|
      item.quantity = 0
      item.price = product.price
    end

    new_quantity = order_item.quantity + change
    
    if new_quantity <= 0
      order_item.destroy
      bot.api.answer_callback_query(
        callback_query_id: callback_query.id,
        text: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
      )
    else
      order_item.update(quantity: new_quantity)
      bot.api.answer_callback_query(
        callback_query_id: callback_query.id,
        text: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ #{new_quantity}"
      )
    end

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    show_product_details(bot, callback_query, product_id)
  end

  def show_cart(bot, message_or_callback, user)
    order = user.orders.find_or_create_by(status: 'cart')
    
    chat_id = if message_or_callback.is_a?(Telegram::Bot::Types::CallbackQuery)
                message_or_callback.message.chat.id
              else
                message_or_callback.chat.id
              end

    if order.order_items.empty?
      bot.api.send_message(
        chat_id: chat_id,
        text: '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'
      )
      return
    end

    text = "–í–∞—à –∑–∞–∫–∞–∑:\n\n"
    total = 0
    order.order_items.each do |item|
      subtotal = item.quantity * item.price
      total += subtotal
      text += "#{item.product.name} x#{item.quantity} = #{subtotal} MDL\n"
    end
    text += "\n–ò—Ç–æ–≥–æ: #{total} MDL"

    buttons = [[
      Telegram::Bot::Types::InlineKeyboardButton.new(
        text: '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
        callback_data: 'checkout'
      )
    ]]
    markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)

    bot.api.send_message(
      chat_id: chat_id,
      text: text,
      reply_markup: markup
    )
  end

  def show_contacts(bot, message)
    bot.api.send_message(
      chat_id: message.chat.id,
      text: "üè† –ù–∞—à –∞–¥—Ä–µ—Å: [–ê–¥—Ä–µ—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞]\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: [–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]\n‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: [–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã]"
    )
  end

  def add_to_cart(bot, callback_query, product_id, user)
    product = Product.find(product_id)
    order = user.orders.find_or_create_by(status: 'cart')
    quantity = 1 # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É
    
    order_item = order.order_items.find_or_create_by(product: product) do |item|
      item.quantity = 0
      item.price = product.price
    end
    order_item.update(quantity: order_item.quantity + quantity)

    bot.api.answer_callback_query(
      callback_query_id: callback_query.id,
      text: "#{product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    show_product_details(bot, callback_query, product_id)
  end

  def handle_text_input(bot, message, user)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  end
end

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __FILE__ == $0
  bot = SushiBot.new
  bot.start
end 