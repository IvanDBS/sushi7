require 'telegram/bot'
require 'dotenv/load'
require_relative 'models'
require_relative 'scraper'

class SushiBot
  def initialize
    @token = ENV['TELEGRAM_BOT_TOKEN']
    @admin_chat_id = ENV['ADMIN_CHAT_ID']
  end

  def update_menu
    puts "\n=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –∏–∑ —Å–∞–π—Ç–∞ ==="
    MenuScraper.scrape_menu
    puts "=== –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ! ===\n"
  end

  def start
    Telegram::Bot::Client.run(@token) do |bot|
      puts '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'
      
      bot.listen do |message|
        begin
          case message
          when Telegram::Bot::Types::Message
            if message.from.id.to_s == @admin_chat_id && message.text == '/update_menu'
              update_menu
              bot.api.send_message(
                chat_id: message.chat.id,
                text: "–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
              )
              next
            end

            user = User.find_or_create_by(telegram_id: message.from.id) do |u|
              u.first_name = message.from.first_name
              u.last_name = message.from.last_name
            end
            handle_message(bot, message, user)
            
          when Telegram::Bot::Types::CallbackQuery
            user = User.find_or_create_by(telegram_id: message.from.id) do |u|
              u.first_name = message.from.first_name
              u.last_name = message.from.last_name
            end
            handle_callback(bot, message, user)
          end
        rescue => e
          puts "–û—à–∏–±–∫–∞: #{e.message}"
          puts e.backtrace
          chat_id = message.is_a?(Telegram::Bot::Types::CallbackQuery) ? message.message.chat.id : message.chat.id
          bot.api.send_message(
            chat_id: chat_id,
            text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          )
        end
      end
    end
  end

  private

  def handle_message(bot, message, user)
    case message.text
    when '/start'
      send_welcome_message(bot, message)
    when 'üç± –ú–µ–Ω—é'
      show_categories(bot, message)
    when 'üõí –ö–æ—Ä–∑–∏–Ω–∞'
      show_cart(bot, message, user)
    when 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'
      show_contacts(bot, message)
    else
      handle_text_input(bot, message, user)
    end
  end

  def send_welcome_message(bot, message)
    keyboard = [
      [{ text: 'üç± –ú–µ–Ω—é' }],
      [{ text: 'üõí –ö–æ—Ä–∑–∏–Ω–∞' }],
      [{ text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã' }]
    ]
    markup = Telegram::Bot::Types::ReplyKeyboardMarkup.new(
      keyboard: keyboard,
      resize_keyboard: true
    )
    
    bot.api.send_message(
      chat_id: message.chat.id,
      text: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Oh! My Sushi! üç£\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      reply_markup: markup
    )
  end

  def show_categories(bot, message_or_callback)
    categories = Category.all
    buttons = categories.each_slice(2).map do |category_pair|
      category_pair.map do |category|
        Telegram::Bot::Types::InlineKeyboardButton.new(
          text: category.name,
          callback_data: "category_#{category.id}"
        )
      end
    end

    markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    chat_id = if message_or_callback.is_a?(Telegram::Bot::Types::CallbackQuery)
                message_or_callback.message.chat.id
              else
                message_or_callback.chat.id
              end

    bot.api.send_message(
      chat_id: chat_id,
      text: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
      reply_markup: markup
    )
  end

  def handle_callback(bot, callback_query, user)
    case callback_query.data
    when /^category_(\d+)$/
      show_category_products(bot, callback_query, $1)
      bot.api.answer_callback_query(callback_query_id: callback_query.id)
    when /^product_(\d+)$/
      show_product_details(bot, callback_query, $1)
      bot.api.answer_callback_query(callback_query_id: callback_query.id)
    when /^add_to_cart_(\d+)$/
      add_to_cart(bot, callback_query, $1, user)
    when /^quantity_(\d+)_(-?\d+)$/
      update_quantity(bot, callback_query, $1, $2.to_i, user)
      bot.api.answer_callback_query(callback_query_id: callback_query.id)
    when /^cart_quantity_(\d+)_(-?\d+)$/
      update_cart_quantity(bot, callback_query, $1, $2.to_i, user)
      bot.api.answer_callback_query(callback_query_id: callback_query.id)
    when 'back_to_categories'
      show_categories(bot, callback_query)
      bot.api.answer_callback_query(callback_query_id: callback_query.id)
    when 'show_cart'
      show_cart(bot, callback_query, user)
      bot.api.answer_callback_query(callback_query_id: callback_query.id)
    when 'checkout'
      start_checkout(bot, callback_query, user)
      bot.api.answer_callback_query(callback_query_id: callback_query.id)
    when 'payment_cash', 'payment_card'
      handle_payment_method(bot, callback_query, user)
      bot.api.answer_callback_query(callback_query_id: callback_query.id)
    when /^accept_order_(\d+)$/
      handle_order_acceptance(bot, callback_query, $1, true) if callback_query.message.chat.id.to_s == @admin_chat_id
    when /^reject_order_(\d+)$/
      handle_order_acceptance(bot, callback_query, $1, false) if callback_query.message.chat.id.to_s == @admin_chat_id
    end
  end

  def show_category_products(bot, callback_query, category_id)
    products = Product.where(category_id: category_id)
    category = Category.find(category_id)
    
    buttons = products.map do |product|
      [Telegram::Bot::Types::InlineKeyboardButton.new(
        text: "#{product.name} ‚Äî #{product.price} MDL",
        callback_data: "product_#{product.id}"
      )]
    end

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º" –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
    buttons << [Telegram::Bot::Types::InlineKeyboardButton.new(
      text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
      callback_data: "back_to_categories"
    )]
    
    markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)
    
    bot.api.send_message(
      chat_id: callback_query.from.id,
      text: "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #{category.name}:",
      reply_markup: markup
    )
  end

  def show_product_details(bot, callback_query, product_id)
    product = Product.find(product_id)
    user = User.find_by(telegram_id: callback_query.from.id)
    order = user.orders.find_or_create_by(status: 'cart')
    order_item = order.order_items.find_by(product: product)
    current_quantity = order_item&.quantity || 0
    
    buttons = []
    
    if current_quantity > 0
      # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
      quantity_buttons = [
        Telegram::Bot::Types::InlineKeyboardButton.new(text: "‚ûñ", callback_data: "quantity_#{product.id}_-1"),
        Telegram::Bot::Types::InlineKeyboardButton.new(text: "#{current_quantity}", callback_data: "current_quantity"),
        Telegram::Bot::Types::InlineKeyboardButton.new(text: "‚ûï", callback_data: "quantity_#{product.id}_1")
      ]
      buttons << quantity_buttons
    else
      # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      add_button = Telegram::Bot::Types::InlineKeyboardButton.new(
        text: "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É ‚Äî #{product.price} MDL",
        callback_data: "add_to_cart_#{product.id}"
      )
      buttons << [add_button]
    end

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã, –µ—Å–ª–∏ –≤ –Ω–µ–π –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
    if order.order_items.any?
      total_items = order.order_items.sum(:quantity)
      total_sum = order.order_items.sum('quantity * price')
      cart_button = Telegram::Bot::Types::InlineKeyboardButton.new(
        text: "üõí –ö–æ—Ä–∑–∏–Ω–∞ (#{total_items} —à—Ç. - #{total_sum} MDL)",
        callback_data: "show_cart"
      )
      buttons << [cart_button]
    end

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
    back_button = Telegram::Bot::Types::InlineKeyboardButton.new(
      text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
      callback_data: "category_#{product.category_id}"
    )
    buttons << [back_button]
    
    markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)
    
    text = "#{product.name}\n\n#{product.description}\n\n–¶–µ–Ω–∞: #{product.price} MDL"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º
    begin
      bot.api.edit_message_caption(
        chat_id: callback_query.message.chat.id,
        message_id: callback_query.message.message_id,
        caption: text,
        reply_markup: markup
      )
    rescue
      if product.image_url
        bot.api.send_photo(
          chat_id: callback_query.from.id,
          photo: product.image_url,
          caption: text,
          reply_markup: markup
        )
      else
        bot.api.send_message(
          chat_id: callback_query.from.id,
          text: text,
          reply_markup: markup
        )
      end
    end
  end

  def update_quantity(bot, callback_query, product_id, change, user)
    product = Product.find(product_id)
    order = user.orders.find_or_create_by(status: 'cart')
    order_item = order.order_items.find_or_create_by(product: product) do |item|
      item.quantity = 0
      item.price = product.price
    end

    new_quantity = order_item.quantity + change
    
    if new_quantity <= 0
      order_item.destroy
      bot.api.answer_callback_query(
        callback_query_id: callback_query.id,
        text: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
      )
    else
      order_item.update(quantity: new_quantity)
      bot.api.answer_callback_query(
        callback_query_id: callback_query.id,
        text: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ #{new_quantity}"
      )
    end

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    show_product_details(bot, callback_query, product_id)
  end

  def show_cart(bot, message_or_callback, user)
    # –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ—Ä–∑–∏–Ω—É
    order = user.orders.find_by(status: 'cart')
    
    # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    if order.nil?
      close_old_carts(user)
      order = user.orders.create(status: 'cart')
    end
    
    chat_id = if message_or_callback.is_a?(Telegram::Bot::Types::CallbackQuery)
                message_or_callback.message.chat.id
              else
                message_or_callback.chat.id
              end

    if order.order_items.empty?
      bot.api.send_message(
        chat_id: chat_id,
        text: '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'
      )
      return
    end

    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    buttons = []
    total = 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    order.order_items.each do |item|
      subtotal = item.quantity * item.price
      total += subtotal
      
      # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∫–∞–∫ –∫–Ω–æ–ø–∫—É
      buttons << [
        Telegram::Bot::Types::InlineKeyboardButton.new(
          text: "#{item.product.name} - #{item.quantity} x #{item.price} = #{subtotal} MDL",
          callback_data: "current_quantity"
        )
      ]
      
      # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
      buttons << [
        Telegram::Bot::Types::InlineKeyboardButton.new(
          text: "‚ûñ",
          callback_data: "cart_quantity_#{item.product.id}_-1"
        ),
        Telegram::Bot::Types::InlineKeyboardButton.new(
          text: item.quantity.to_s,
          callback_data: "current_quantity"
        ),
        Telegram::Bot::Types::InlineKeyboardButton.new(
          text: "‚ûï",
          callback_data: "cart_quantity_#{item.product.id}_1"
        )
      ]
    end

    text += "üíµ –ò—Ç–æ–≥–æ: #{total} MDL"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    buttons << [
      Telegram::Bot::Types::InlineKeyboardButton.new(
        text: '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
        callback_data: 'checkout'
      )
    ]
    buttons << [
      Telegram::Bot::Types::InlineKeyboardButton.new(
        text: '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
        callback_data: 'back_to_categories'
      )
    ]

    markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)

    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ callback
    if message_or_callback.is_a?(Telegram::Bot::Types::CallbackQuery)
      begin
        bot.api.edit_message_text(
          chat_id: chat_id,
          message_id: message_or_callback.message.message_id,
          text: text,
          reply_markup: markup,
          parse_mode: 'HTML'
        )
      rescue
        bot.api.send_message(
          chat_id: chat_id,
          text: text,
          reply_markup: markup,
          parse_mode: 'HTML'
        )
      end
    else
      bot.api.send_message(
        chat_id: chat_id,
        text: text,
        reply_markup: markup,
        parse_mode: 'HTML'
      )
    end
  end

  def show_contacts(bot, message)
    bot.api.send_message(
      chat_id: message.chat.id,
      text: "üìç –ê–¥—Ä–µ—Å:\nStr. Mitropolit Gavriil BƒÉnulescu-Bodoni 57\n\n" \
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω:\n061 061 111\n\n" \
            "üìß E-mail:\noffice@ohmysushi.md\n\n" \
            "‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:\n12:00 ‚Äì 00:00"
    )
  end

  def add_to_cart(bot, callback_query, product_id, user)
    product = Product.find(product_id)
    order = user.orders.find_or_create_by(status: 'cart')
    quantity = 1 # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É
    
    order_item = order.order_items.find_or_create_by(product: product) do |item|
      item.quantity = 0
      item.price = product.price
    end
    order_item.update(quantity: order_item.quantity + quantity)

    bot.api.answer_callback_query(
      callback_query_id: callback_query.id,
      text: "#{product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    show_product_details(bot, callback_query, product_id)
  end

  def handle_text_input(bot, message, user)
    order = user.orders.find_by(status: 'checkout')
    return unless order

    case order.checkout_step
    when 'phone'
      if message.text.match?(/^\+?\d{8,15}$/)
        order.update(phone: message.text, checkout_step: 'address')
        ask_for_address(bot, message.chat.id)
      else
        bot.api.send_message(
          chat_id: message.chat.id,
          text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        )
      end
    when 'address'
      if message.text.length >= 5
        order.update(address: message.text, checkout_step: 'comment')
        ask_for_comment(bot, message.chat.id)
      else
        bot.api.send_message(
          chat_id: message.chat.id,
          text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–¥—Ä–µ—Å"
        )
      end
    when 'comment'
      order.update(comment: message.text, checkout_step: 'payment')
      show_payment_methods(bot, message.chat.id)
    end
  end

  def start_checkout(bot, callback_query, user)
    order = user.orders.find_by(status: 'cart')
    return unless order&.order_items&.any?

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    order.update(status: 'checkout', checkout_step: 'phone')
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    bot.api.send_message(
      chat_id: callback_query.message.chat.id,
      text: "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )
  end

  def ask_for_address(bot, chat_id)
    bot.api.send_message(
      chat_id: chat_id,
      text: "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
    )
  end

  def ask_for_comment(bot, chat_id)
    bot.api.send_message(
      chat_id: chat_id,
      text: "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    )
  end

  def show_payment_methods(bot, chat_id)
    buttons = [
      [
        Telegram::Bot::Types::InlineKeyboardButton.new(
          text: "üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏",
          callback_data: "payment_cash"
        )
      ],
      [
        Telegram::Bot::Types::InlineKeyboardButton.new(
          text: "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π",
          callback_data: "payment_card"
        )
      ]
    ]
    markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)
    
    bot.api.send_message(
      chat_id: chat_id,
      text: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
      reply_markup: markup
    )
  end

  def handle_payment_method(bot, callback_query, user)
    order = user.orders.find_by(status: 'checkout')
    return unless order

    payment_method = callback_query.data.split('_').last
    order.update(payment_method: payment_method)

    if payment_method == 'cash'
      complete_order(bot, callback_query, order)
    else
      # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π
      bot.api.send_message(
        chat_id: callback_query.message.chat.id,
        text: "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏."
      )
      show_payment_methods(bot, callback_query.message.chat.id)
    end
  end

  def complete_order(bot, callback_query, order)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_message = "üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
    admin_message += "üî¢ ID –∑–∞–∫–∞–∑–∞: #{order.id}\n"
    admin_message += "üë§ –ö–ª–∏–µ–Ω—Ç: #{callback_query.from.first_name}"
    admin_message += " #{callback_query.from.last_name}" if callback_query.from.last_name
    admin_message += " (@#{callback_query.from.username})" if callback_query.from.username
    admin_message += "\n"
    admin_message += "üì± –¢–µ–ª–µ—Ñ–æ–Ω: #{order.phone}\n"
    admin_message += "üìç –ê–¥—Ä–µ—Å: #{order.address}\n"
    admin_message += "üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: #{order.comment}\n" if order.comment.present? && order.comment != '-'
    admin_message += "üí∞ –û–ø–ª–∞—Ç–∞: #{order.payment_method == 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏' : '–ö–∞—Ä—Ç–æ–π'}\n\n"
    admin_message += "üìù –ó–∞–∫–∞–∑:\n"
    
    total = 0
    order.order_items.each do |item|
      subtotal = item.quantity * item.price
      total += subtotal
      admin_message += "- #{item.product.name} x#{item.quantity} = #{subtotal} MDL\n"
    end
    admin_message += "\nüíµ –ò—Ç–æ–≥–æ: #{total} MDL"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    buttons = [
      [
        Telegram::Bot::Types::InlineKeyboardButton.new(
          text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑',
          callback_data: "accept_order_#{order.id}"
        ),
        Telegram::Bot::Types::InlineKeyboardButton.new(
          text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
          callback_data: "reject_order_#{order.id}"
        )
      ]
    ]
    markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    bot.api.send_message(
      chat_id: @admin_chat_id,
      text: admin_message,
      reply_markup: markup,
      parse_mode: 'HTML'
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.api.send_message(
      chat_id: callback_query.message.chat.id,
      text: "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ Oh! My Sushi! üç£"
    )

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    order.update(status: 'pending')
    user = User.find_by(telegram_id: callback_query.from.id)
    close_old_carts(user)
    user.orders.create(status: 'cart')
  end

  def handle_order_acceptance(bot, callback_query, order_id, accepted)
    order = Order.find(order_id)
    return unless order

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    new_status = accepted ? 'accepted' : 'rejected'
    order.update(status: new_status)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    message = if accepted
      "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è!\n\n–û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 60-90 –º–∏–Ω—É—Ç.\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üç£"
    else
      "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n" \
      "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.\n" \
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\n" \
      "‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 12:00 ‚Äì 00:00\n" \
      "üìû –¢–µ–ª–µ—Ñ–æ–Ω: 061 061 111"
    end

    bot.api.send_message(
      chat_id: order.user.telegram_id,
      text: message
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫–µ
    admin_message = callback_query.message.text + "\n\n"
    admin_message += accepted ? "‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç" : "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω"

    bot.api.edit_message_text(
      chat_id: @admin_chat_id,
      message_id: callback_query.message.message_id,
      text: admin_message
    )

    bot.api.answer_callback_query(
      callback_query_id: callback_query.id,
      text: accepted ? "–ó–∞–∫–∞–∑ ##{order.id} –ø—Ä–∏–Ω—è—Ç" : "–ó–∞–∫–∞–∑ ##{order.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω"
    )

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ—Ä–∑–∏–Ω—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω
    if !accepted
      close_old_carts(order.user)
      order.user.orders.create(status: 'cart')
    end
  end

  def update_cart_quantity(bot, callback_query, product_id, change, user)
    order = user.orders.find_by(status: 'cart')
    return unless order

    product = Product.find(product_id)
    order_item = order.order_items.find_by(product: product)
    return unless order_item

    new_quantity = order_item.quantity + change
    
    if new_quantity <= 0
      order_item.destroy
      bot.api.answer_callback_query(
        callback_query_id: callback_query.id,
        text: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
      )
    else
      order_item.update(quantity: new_quantity)
      bot.api.answer_callback_query(
        callback_query_id: callback_query.id,
        text: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ #{new_quantity}"
      )
    end

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    show_cart(bot, callback_query, user)
  end

  def close_old_carts(user)
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.orders.where(status: 'cart').update_all(status: 'abandoned')
  end
end

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __FILE__ == $0
  bot = SushiBot.new
  bot.start
end 